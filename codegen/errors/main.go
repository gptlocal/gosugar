package main

import (
	"flag"
	"fmt"
	"os"
	"path/filepath"
)

func main() {
	errmod := flag.String("errmod", "", "error module")
	flag.Parse()

	if *errmod == "" {
		fmt.Println("Error: The '-errmod' argument is required.")
		os.Exit(1)
	}

	pwd, err := os.Getwd()
	if err != nil {
		fmt.Println("can not get current working directory")
		os.Exit(1)
	}

	pkg := filepath.Base(pwd)
	if pkg == "netools-core" {
		pkg = "core"
	}

	file, err := os.OpenFile("errors.generated.go", os.O_WRONLY|os.O_TRUNC|os.O_CREATE, 0o644)
	if err != nil {
		fmt.Printf("Failed to generate errors.generated.go: %v", err)
		os.Exit(1)
	}
	defer file.Close()

	fmt.Fprintf(file, `// Code generated by codegen.errors. DO NOT EDIT.
package %s
import "%s"

type errPathObjHolder struct{}

func newError(values ...interface{}) *errors.Error {
	return errors.New(values...).WithPathObj(errPathObjHolder{})
}
`, pkg, *errmod)
}
